version: "2.1"

networks:
  service-network:
    driver: bridge

services:

  gateway-service:
    image: 'gateway-service'
    build:
      context: gateway-service/.
    container_name: gateway
    networks:
      - service-network
    restart: always
    expose:
      - '8081'
    ports:
      - '8081:8081'
    depends_on:
      - audit-service
      - alarm-service
      - config-server

      # ////////////////////////////

  sensor-listener:
    image: 'sensor-listener'
    build:
      context: sensor-listener/.
    container_name: sensor-listener
    networks:
      - service-network
    restart: always
    expose:
      - '8085'
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://listener-db:5431/postgres
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=qwerty
      - BOOTSTRAP-SERVERS=kafka:9092
    depends_on:
      - sensor
      - listener-db
      - config-server

  listener-db:
    image: postgres:alpine3.13
    container_name: listener-db
    networks:
      - service-network
    restart: always
    command: -p 5431
    expose:
      - '5431'
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=qwerty

      # ////////////////////////////

  alarm-service:
    image: 'alarm-service'
    build:
      context: alarm-service/.
    container_name: alarm
    networks:
      - service-network
    restart: always
    expose:
      - '8086'
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://alarm-db:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=1234
      - EMAIL_ADDRESS_TO=shadow.wariorx007@gmail.com
      - EMAIL_ADDRESS_FROM=zlaypanda@mail.ru
      - BOOTSTRAP-SERVERS=kafka:9092
    depends_on:
      - sensor
      - alarm-db
      - config-server

  alarm-db:
    image: postgres:alpine3.13
    container_name: alarm-db
    networks:
      - service-network
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234

  # //////////////////////////////

  audit-service:
    image: 'audit-service'
    build:
      context: audit-service/.
    container_name: audit
    networks:
      - service-network
    restart: always
    expose:
      - '8084'
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://audit-db:5430/postgres
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=1234
      - BOOTSTRAP-SERVERS=kafka:9092
    depends_on:
      - sensor
      - audit-db
      - config-server

  audit-db:
    image: postgres:alpine3.13
    restart: always
    container_name: audit-db
    networks:
      - service-network
    command: -p 5430
    expose:
      - '5430'
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=1234

  # ///////////////////////////////

  sensor:
    image: 'sensor:latest'
    build:
      context: sensor/.
    container_name: sensor
    networks:
      - service-network
    expose:
      - '8088'
    restart: always
    environment:
      - BOOTSTRAP-SERVERS=kafka:9092
    depends_on:
      - config-server

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    networks:
      - service-network
    expose:
      - '2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    networks:
      - service-network
    restart: on-failure
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    volumes:
      - ./:/etc/kafka

  config-server:
    image: 'config-server'
    build:
      context: config-server/.
    container_name: config
    networks:
      - service-network
    restart: always
    expose:
      - '8888'
    ports:
      - '8888:8888'